[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "Amara"
dynamic = ["version"]
description = 'General-purpose web data processing library with IRI handling and MicroXML/XML processing'
readme = "README.md"
requires-python = ">=3.12"
license = "Apache-2.0"
keywords = ["web", "data", "url", "uri", "iri", "xml", "microxml", "html"]
authors = [
  { name = "Uche Ogbuji", email = "uche@oori.dev" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Text Processing :: Markup :: XML",
  "Topic :: Text Processing :: Markup :: HTML",
]
dependencies = [
  "nameparser",
  "ply",
  "html5lib-modern",
]

[project.urls]
Documentation = "https://github.com/OoriData/Amara#readme"
Issues = "https://github.com/OoriData/Amara/issues"
Source = "https://github.com/OoriData/Amara"

[project.scripts]
microx = "amara.uxml.cli.microx:main"

[tool.hatch.version]
path = "pylib/__about__.py"

# Package configuration
[tool.setuptools.packages.find]
where = ["pylib"]
include = ["amara*"]

[tool.setuptools.package-data]
"amara.cmodules" = ["*.c", "*.h"]

# C extension configuration
[[tool.setuptools.ext-modules]]
name = "amara.cmodules.cxmlstring"
sources = ["clib/xmlstring.c"]
include-dirs = ["clib"]

# Hatch environemnts are too fiddly. For example, from `hatch run test` I get 
# ModuleNotFoundError: No module named 'amara'
# This may well have to do with my rewriting path in distribution,
# But I'm not compromising on that, so I guess just install & use
# e.g. pytest directly (tried dev-mode false, but no difference)
[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-mock",
  "pytest-httpx",
  "pytest-asyncio",
]
dev-mode = false
[tool.hatch.envs.default.scripts]
test = "pytest {args:test}"
test-cov = "coverage run -m pytest {args:test}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:pylib/amara test}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = ["E", "F"]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["amara"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"test/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["pylib", "test"]
branch = true
parallel = true
omit = [
  "pylib/__about__.py",
]

[tool.coverage.paths]
amara = ["pylib", "*/pylib"]
test = ["test", "*/test"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
